Things that need to be happening
	- Resource handling
		- Textures/Models for rendering engine
		- Object states for logic and physics engine
		- Audio files for audio engine
		- Various configuration files (GUI, graphics settings, etc) used at initialization and program finish
	- Audio handling
	+ Message handling
	- Graphics handling
	- User interfacing (Menus,buttons, handling input devices etc)
	- Physics handling
		- Collission detection
	- Game logic
	- (Multithreading)
	
*
*	MESSAGES AND EVENTS
*	MODULES: CORE
*
	
Message Handler:

Usage:
	To send and receive messages the new module must be derived from the Module class defined in Module.h.
	The object must be registered at the MessageHandler object, to do this the object must receive the conditional variable from the MessageHandler,
	it also has to have set itself a moduleRole, which must be from the enum MODULES defined in module.h, this can be expanded as needed.
	
	To process messages the receiveMessage() pure virtual function must be implemented in the class.
	To get a new message that has been sent to this module use the readNextMessage() function.
	
	To send new messages to modules, the sendMessage() or sendDataPacket() functions can be used depending on whether we will be sending data along the event.
	These 2 functions notify the MessageHandler that a new message has been sent.
	

Module: GLFW window handler -> Core								-> Renderer
Event: 	Mouse movement 		-> Get new mouse position(int,int)	-> Get new mouse position(int,int)
What we know based on event:
	- The receiver and the sender (explicitly from message)
	- The event related to the message
	- The object will be of type T (this should be derived from handler-sender-event)

What the job of the messageHandler:
	Sender side:
		- Place the object T into sendQueue
		- Notify MessageHandler through condition variable, or if you don't do that the message should still be sent at the end of the current loop
		- Allocate new Memory for Message and optionally Data

	MessageHandler:
		- Wait until notified
		- On notification check sendQueues of all registered Modules
		- If new message found, move it to the target Module's receiveQueue
	
	Receiver side:
		- Check for new messages (check if receiveQueue is empty)
		- In case of Message with Data, cast the packet to the correct type based on Message information or the architecture
		- Delete Message and Data
	
*
*	VULKAN RENDERER
*	MODULES: RENDERER
*

Resources used:
Created fix on initialization:
	- Descriptor pools
	- Swapchain
	- Framebuffer
	- Command pool
	- VkImages
	- Image views
	- VmaAllocations
	- Depth buffers
	- Graphic pipelines
	- Render pass and subpasses
	- Command buffer

Created at runtime on demand:
	- Descriptor sets
	- Descriptor set layouts
	- Vertex/Index/Uniform buffers
	- VmaAllocations
	- VkImages
	- Image views
	- Image samplers
	
Rendering process:
	The rendering process requires the following data from an object:
		- Vertex locations
		- Vertex amount
		- Texture locations
		- Texture ID
		- Shader ID
		- Transformation matrix location in an UBO that contains all MVP arrays (via push constant)
		- MVP matrices UBO
	Based on the information provided it should:
		- Select or create a Render Pass with the same amount of attachments required
		- Make sure that the required attachments are available and have descriptorsets.
		- Bind the descriptor sets required by the graphics pipeline
		- Create a command buffer that sets up the renderpass, bind the pipeline and the descriptors and buffer objects, then calls the draw commands
		- 
		
		Setting up for command buffer recording in multiple threads:
			- Create Framebuffer * Thread amount of command pools
			- Using the subpass, use the threads to record the commands into the secondary buffers
			- Once all threads are finished, execute the secondary command buffers from the primary

Render engine interface:

	Renderable base class maybe?
	
SceneGraph:
	This is part of the core module, and is accessed via messages to the core module.	

Data structure:
	- Tree representation of the current scene, nodes contained are Group/Transformation/Model nodes.
	- Transformations apply to all their child nodes
	- Model nodes can have no children
	- All nodes have a dirty flag that shows whether they had any changes since the last render call.
	- Any modification must change all children node's dirty flag to true
	- This process can stop if it reaches a node that is already marked dirty 
	- All model nodes created are initially marked dirty
	
	
	- Array representation of all the leaf nodes that are Models, this representation is used to pass all the required data for the drawcalls to the Render module.
	- This array representation must be checked 
	
Functions required:
	- Generation of IDs for resources
		Possible resources:
			- Shaders
			- Textures
			- Models
			- Uniform values
	- Management of Graphics card memory
		Possible events:
			- Upload new data
			- Update existing data
			- Unload unused data
	- Create and manage the render pipeline
	- Change rendering pipeline based on settings

Tasks:
	- Loading/unloading of resources
	- Creating a tree structure that contains a hierarchy of objects and their transformations
	- Calling of render functions happens by calling render function with a flat representation of this array

Interface:
	- add(Renderable):
		

			

*
*	INPUT EVENT HANDLING
*	MODULES: WINDOW(receiving), CORE(process relevant events), LOGIC(process relevant events)
*

Submodule of window handler (this is because window handling module communicates with OS).

This module is implemented as a static member due to glfw limitations.


Tasks:
	- Stores information about each key:
		- Current key state (KEY_UP/KEY_DOWN)
		- Event bound to key
		- Optional: last keypress time
	- After event polling messages shall be sent accordingly to the contents of a container that stores all currently held keys.

Constists of 1 class

class KeyHandler();

public functions: 

std::vector<std::pair<std::string,enum EVENTS>> getHeldKeys():
	- returns currently held down keys and the events bound to them
bool bindEventToKey(const char* button, enum EVENTS eventToBind, std::error_code* errCode = nullptr):
	- bind a new event to a key
	- returns true on success false on failure
	- optionally error cause can be retrieved via supplying an std::error_code pointer
		Error causes:
		- key already bound
		- no such key
		- unsupported event
		- invalid key
	

*
*	RENDERABLE RESOURCES
*	MODULES: CORE(loading resources), LOGIC(creating events for CORE module), RENDERER(creating video card memory allocations and render calls)
*

namespace RenderingOptions:
	- Contains all options that can be used while rendering an object
	Supported options:
		- Wireframe mode

class Renderable:
	- Represents an object that is renderable.
	- Consists of a vertex array, an index array
	- Contains extra rendering options, these are picked from the RenderingOptions namespace
	- Can contain a texture array and/or a color array
	- Contains information about shaders required
	- Contains a bounding box
	

*
*	RESOURCE LOADING AND MANAGEMENT
*	MODULES: CORE(loading resources), LOGIC(creating events for CORE module)
*

Events that need to be handled:
A new map has to be loaded:
	- Unloading of all the old unused objects
	- Loading of all the new objects
	- Building a SceneGraph

During runtime:
	- Load of a new object that is optional and/or rare
	- Unload less used resources to free memory if needed
	- Changing of SceneGraph
	- Updating Uniforms
	- Possibly save resources to Disk
	
On program end:
	- Free all allocated memory
	- Possibly save resources to Disk

References to loaded meshes are handled via a map using std::string as key.
*
*	CODE GENERATION OPTION: The map can be changed to an enum if we know all the models that can be loaded,
*		seperate all references to objects to a header and namespace that can be used to generate code later.
*
*	Look up all calls to the function that handles loading objects and replace the std::string with the enum.
*

ResourceHandler:
	This is part of the core module, and is accessed via messages to the core module.

Tasks:
	- Loading/unloading of resources upon SceneGraph instructions
	- Loading resources from Disk into memory (shaders, meshes, textures)
	- Creating unique IDs for objects
	- Setting up GPU buffers and the map of resources


*
*	ENGINE CORE
*	MODULES: CORE
*

Basic engine concept, modules that each own a messaging queue to send and another to receive events:
	- WINDOW module interfaces with OS, events incoming polled are sent to Core, which redistributes them:
	- LOGIC module sends requests for loading new resources, or marks currently loaded ones as unnneded
	- RENDERER module sends messages regarding the current frame render status
	
Core:
	MessageHandler:
		- Sends relevant events to their respective modules
		
	- Handles Submodule queues???
	- Handles Starting / Stopping submodules
		
Rendering engine:
	Tasks:
		- Handles 
		- Handles Graphic card memory
			- Loading shaders
			- Loading meshes
			- Updating buffers
		- Handles the rendering process
			- Creating pipeline
			- Setting up command buffers
			- Handling render passes
	Communication with core:
		- Semaphores: Current rendering state [In progress/Not in progress]
		- On signal from Core, starts the rendering process
		- After rendering process sends signal to Core
	
		